services:
  # --- Existing Tailscale Service ---
  tailscale:
    container_name: tailscale
    image: tailscale/tailscale
    restart: unless-stopped
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    volumes:
      - tailscale-var-lib:/var/lib
      - /dev/net/tun:/dev/net/tun
    environment:
      # NOTE: TS_AUTHKEY still needs to be available where docker-compose runs,
      # or set directly here or via system environment variables.
      # It won't be read from the project's .env file by default for this service.
      - TS_AUTHKEY=${TS_AUTHKEY}
      - TS_EXTRA_ARGS=--advertise-exit-node --hostname=${TS_HOSTNAME:-kr-exit-node}

  # --- Autotrade Infrastructure ---
  postgres_db:
    container_name: postgres_db
    image: postgres:15
    restart: unless-stopped
    # These env vars can still be sourced from the .env file in the project directory
    # because docker-compose reads the .env file in the context of the compose file first.
    environment:
      POSTGRES_USER: ${DB_USER:-user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-autotrade}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - autotrade_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-user} -d ${DB_NAME:-autotrade}"]
      interval: 10s
      timeout: 5s
      retries: 5

  qdrant_db:
    container_name: qdrant_db
    image: qdrant/qdrant:latest
    restart: unless-stopped
    environment:
      QDRANT_API_KEY: ${QDRANT_API_KEY:-}
    ports:
      - "${QDRANT_PORT:-6333}:6333"
    volumes:
      - qdrant_storage:/qdrant/storage
    networks:
      - autotrade_net
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:6333/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana_dashboard:
    container_name: grafana_dashboard
    image: grafana/grafana-oss:latest
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      postgres_db:
        condition: service_healthy
    networks:
      - autotrade_net

  # --- Autotrade Application Services ---
  autotrade_app:
    container_name: autotrade_app
    build:
      context: ./KIS_ETF_Autotrade
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      # Modified path to look inside the project directory
      - ./KIS_ETF_Autotrade/.env
    command: poetry run uvicorn src.main:app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    volumes:
      - app_logs:/app/logs
    depends_on:
      postgres_db:
        condition: service_healthy
      qdrant_db:
        condition: service_healthy
    networks:
      - autotrade_net

  discord_bot:
    container_name: discord_bot
    build:
      context: ./KIS_ETF_Autotrade
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      # Modified path to look inside the project directory
      - ./KIS_ETF_Autotrade/.env
    command: poetry run python src/discord/bot.py
    volumes:
      - app_logs:/app/logs
    depends_on:
      autotrade_app:
        condition: service_started
    networks:
      - autotrade_net

volumes:
  tailscale-var-lib:
  postgres_data:
  qdrant_storage:
  grafana_data:
  app_logs:

networks:
  autotrade_net:
    driver: bridge 